{"version":3,"file":"static/js/107.bacb1b58.chunk.js","mappings":"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","sources":["redux/selector.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: 40px;\n`;\n\nexport const ListItem = styled.li`\n  font-size: 36px;\n`;\nexport const Button = styled.button`\n  border: 2px solid #b1b1b2;\n  border-radius: 4px;\n  background-color: #fff;\n  font-size: 24px;\n  padding: 4px 8px;\n  margin-top: 20px;\n  box-shadow: 2px 3px 2px rgba(0, 0, 0, 0.1);\n  &:hover {\n    background-color: #0442dc;\n    color: #fff;\n  }\n`;\nexport const ListItemWrapper = styled.div`\n  display: flex;\n  width: 650px;\n  justify-content: space-between;\n  align-items: flex-end;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { selectContacts, selectFilter } from 'redux/selector';\nimport { List, ListItem, Button, ListItemWrapper } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const filteredList = contacts.filter(el =>\n    el.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n  );\n\n  return (\n    <List>\n      {filteredList.map(contact => {\n        return (\n          <ListItem key={contact.id}>\n            <ListItemWrapper>\n              {contact.name}: {contact.phone}\n              <Button\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(contact.id))}\n              >\n                Delete\n              </Button>\n            </ListItemWrapper>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Span = styled.span`\nfont-size: 36px;\n`\n\nexport const FilterInput = styled.div`\ndisplay: flex;\nflex-direction: column;\n`\n\nexport const Input = styled.input`\ncolor: #010101;\n  background-color: #fff;\n  padding: 4px;\n  margin-top: 10px;\n  outline: none;\n  border: 2px solid #b1b1b2;\n  border-radius: 4px;\n  min-height: 30px;\n  width: 250px;\n  font-size: 24px;\n\n  &:focus {\n    outline: none;\n    border-color: #80a3f9;\n    box-shadow: 0 0 10px #80a3f9;\n    background-color: #fff;\n  }\n`","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selector';\nimport { Span, FilterInput, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n\n  return (\n    <FilterInput>\n      <Span>Find contacts by name</Span>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        title=\"Filter\"\n        onChange={e => dispatch(setFilter(e.target.value))}\n        value={value}\n      />\n    </FilterInput>\n  );\n};\n","import styled from 'styled-components';\nimport { Field as FormikField, Form as FormikForm } from 'formik';\n\nexport const Field = styled(FormikField)`\n  color: #010101;\n  background-color: #fff;\n  padding: 4px;\n  margin-top: 10px;\n  outline: none;\n  border: 2px solid #b1b1b2;\n  border-radius: 4px;\n  min-height: 30px;\n  width: 250px;\n  font-size: 24px;\n\n  &:focus {\n    outline: none;\n    border-color: #80a3f9;\n    box-shadow: 0 0 10px #80a3f9;\n    background-color: #fff;\n  }\n`;\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  border: 1px solid #010101;\n  border-radius: 8px;\n  width: 550px;\n  min-height: 150px;\n  padding: 10px;\n`;\n\nexport const Label = styled.label`\n  font-size: 36px;\n\n  &:not(:first-child) {\n    margin-top: 20px;\n  }\n`;\n\nexport const Button = styled.button`\nwidth: 150px;\nborder: 2px solid #b1b1b2;\nborder-radius: 4px;\nbackground-color: #fff;\nfont-size: 24px;\npadding: 4px;\nmargin-top: 20px;\nbox-shadow: 2px 3px 2px rgba(0, 0, 0, 0.1);\n&:hover{\n    background-color: #0442DC;\n    color: #fff;\n}\n`","import { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selector';\nimport { Field, Form, Label, Button } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmit = (value, { resetForm }) => {\n    let isDuplicate = true;\n\n    contacts.map(\n      item =>\n        (isDuplicate = !item.name\n          .toLocaleLowerCase()\n          .includes(value.name.toLocaleLowerCase()))\n    );\n    if (isDuplicate) {\n      const contact = { name: value.name, phone: value.number };\n      dispatch(addContact(contact));\n      resetForm();\n    } else {\n      alert(`${value.name} is already in contacts`);\n    }\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Label htmlFor=\"name\">Name</Label>\n          <Field\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n\n          <Label htmlFor=\"number\">Number</Label>\n          <Field\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n\n          <Button type=\"submit\">Add contact</Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\n// import { ContactForm } from './ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectError, selectIsLoading } from 'redux/selector';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div\n      style={{\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 20,\n        fontSize: 40,\n        color: '#010101',\n      }}\n    >\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </div>\n  );\n};\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","List","styled","ListItem","Button","ListItemWrapper","ContactList","useSelector","dispatch","useDispatch","filteredList","el","name","toLocaleLowerCase","includes","map","contact","phone","type","onClick","deleteContact","id","Span","FilterInput","Input","Filter","value","title","onChange","e","setFilter","target","Field","FormikField","Form","FormikForm","Label","ContactForm","initialValues","number","onSubmit","resetForm","isDuplicate","item","addContact","alert","htmlFor","placeholder","pattern","required","Contacts","useEffect","fetchContacts","style","height","display","flexDirection","padding","fontSize","color"],"sourceRoot":""}